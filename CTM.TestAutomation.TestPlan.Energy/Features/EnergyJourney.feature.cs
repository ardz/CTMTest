// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CTM.TestAutomation.TestPlan.Energy.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EnergyJourneyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EnergyJourney.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "EnergyJourney", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "EnergyJourney")))
            {
                CTM.TestAutomation.TestPlan.Energy.Features.EnergyJourneyFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check results returned after post code entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnergyJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EnergySmoke")]
        public virtual void CheckResultsReturnedAfterPostCodeEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check results returned after post code entered", new string[] {
                        "EnergySmoke"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given("I am on the Energy Journey start page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
testRunner.When("I search for the post code PE2 6YS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
testRunner.Then("I should I see options for my current energy supplier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User has no bill, same gas and electric supplier on standard tariff, pays by dd a" +
            "nd wishes to switch to another dd fixed tariff")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnergyJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EnergyRegression")]
        public virtual void UserHasNoBillSameGasAndElectricSupplierOnStandardTariffPaysByDdAndWishesToSwitchToAnotherDdFixedTariff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User has no bill, same gas and electric supplier on standard tariff, pays by dd a" +
                    "nd wishes to switch to another dd fixed tariff", new string[] {
                        "EnergyRegression"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Profile",
                        "CurrentSupplier",
                        "CurrentElectricitySpend",
                        "CurrentGasSpend",
                        "Period"});
            table1.AddRow(new string[] {
                        "1",
                        "British Gas",
                        "80",
                        "80",
                        "Monthly"});
            table1.AddRow(new string[] {
                        "2",
                        "EDF Energy",
                        "2500",
                        "2500",
                        "Quarterly"});
            table1.AddRow(new string[] {
                        "3",
                        "E.ON",
                        "450",
                        "450",
                        "Six Monthly"});
            table1.AddRow(new string[] {
                        "4",
                        "NPower",
                        "8000",
                        "8000",
                        "Annually"});
            table1.AddRow(new string[] {
                        "5",
                        "Scottish Power",
                        "40",
                        "40",
                        "Monthly"});
            table1.AddRow(new string[] {
                        "6",
                        "SSE",
                        "200",
                        "200",
                        "Monthly"});
#line 14
testRunner.Given("These user profiles where user has no bill and same provider for gas and electric" +
                    ":", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Profile",
                        "MinimumSaving"});
            table2.AddRow(new string[] {
                        "1",
                        "200"});
            table2.AddRow(new string[] {
                        "2",
                        "3500"});
            table2.AddRow(new string[] {
                        "3",
                        "300"});
            table2.AddRow(new string[] {
                        "4",
                        "5000"});
            table2.AddRow(new string[] {
                        "5",
                        "50"});
            table2.AddRow(new string[] {
                        "6",
                        "75"});
#line 23
testRunner.Then("The minimum expected saving should be:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
